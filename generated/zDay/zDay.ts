// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PositionClosed extends ethereum.Event {
  get params(): PositionClosed__Params {
    return new PositionClosed__Params(this);
  }
}

export class PositionClosed__Params {
  _event: PositionClosed;

  constructor(event: PositionClosed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get exitPrice(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get profitOrLoss(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PositionOpened extends ethereum.Event {
  get params(): PositionOpened__Params {
    return new PositionOpened__Params(this);
  }
}

export class PositionOpened__Params {
  _event: PositionOpened;

  constructor(event: PositionOpened) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get side(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get collateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get size(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get entryPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get openTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get maxLoss(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class zDay__getPosResultValue0Struct extends ethereum.Tuple {
  get side(): i32 {
    return this[0].toI32();
  }

  get collateral(): BigInt {
    return this[1].toBigInt();
  }

  get size(): BigInt {
    return this[2].toBigInt();
  }

  get entryPrice(): BigInt {
    return this[3].toBigInt();
  }

  get openTime(): BigInt {
    return this[4].toBigInt();
  }

  get maxLoss(): BigInt {
    return this[5].toBigInt();
  }
}

export class zDay__positionsResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: i32,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getSide(): i32 {
    return this.value0;
  }

  getCollateral(): BigInt {
    return this.value1;
  }

  getSize(): BigInt {
    return this.value2;
  }

  getEntryPrice(): BigInt {
    return this.value3;
  }

  getOpenTime(): BigInt {
    return this.value4;
  }

  getMaxLoss(): BigInt {
    return this.value5;
  }
}

export class zDay extends ethereum.SmartContract {
  static bind(address: Address): zDay {
    return new zDay("zDay", address);
  }

  allUsers(param0: BigInt): Address {
    let result = super.call("allUsers", "allUsers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allUsers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allUsers", "allUsers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  bal(): BigInt {
    let result = super.call("bal", "bal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bal", "bal():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPos(_add: Address): zDay__getPosResultValue0Struct {
    let result = super.call(
      "getPos",
      "getPos(address):((uint8,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(_add)]
    );

    return changetype<zDay__getPosResultValue0Struct>(result[0].toTuple());
  }

  try_getPos(
    _add: Address
  ): ethereum.CallResult<zDay__getPosResultValue0Struct> {
    let result = super.tryCall(
      "getPos",
      "getPos(address):((uint8,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(_add)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<zDay__getPosResultValue0Struct>(value[0].toTuple())
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  positions(param0: Address): zDay__positionsResult {
    let result = super.call(
      "positions",
      "positions(address):(uint8,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new zDay__positionsResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_positions(param0: Address): ethereum.CallResult<zDay__positionsResult> {
    let result = super.tryCall(
      "positions",
      "positions(address):(uint8,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new zDay__positionsResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  temp(): BigInt {
    let result = super.call("temp", "temp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_temp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("temp", "temp():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AutoCloseCall extends ethereum.Call {
  get inputs(): AutoCloseCall__Inputs {
    return new AutoCloseCall__Inputs(this);
  }

  get outputs(): AutoCloseCall__Outputs {
    return new AutoCloseCall__Outputs(this);
  }
}

export class AutoCloseCall__Inputs {
  _call: AutoCloseCall;

  constructor(call: AutoCloseCall) {
    this._call = call;
  }
}

export class AutoCloseCall__Outputs {
  _call: AutoCloseCall;

  constructor(call: AutoCloseCall) {
    this._call = call;
  }
}

export class ChangeCollCall extends ethereum.Call {
  get inputs(): ChangeCollCall__Inputs {
    return new ChangeCollCall__Inputs(this);
  }

  get outputs(): ChangeCollCall__Outputs {
    return new ChangeCollCall__Outputs(this);
  }
}

export class ChangeCollCall__Inputs {
  _call: ChangeCollCall;

  constructor(call: ChangeCollCall) {
    this._call = call;
  }

  get _newColl(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeCollCall__Outputs {
  _call: ChangeCollCall;

  constructor(call: ChangeCollCall) {
    this._call = call;
  }
}

export class ChangeSizeCall extends ethereum.Call {
  get inputs(): ChangeSizeCall__Inputs {
    return new ChangeSizeCall__Inputs(this);
  }

  get outputs(): ChangeSizeCall__Outputs {
    return new ChangeSizeCall__Outputs(this);
  }
}

export class ChangeSizeCall__Inputs {
  _call: ChangeSizeCall;

  constructor(call: ChangeSizeCall) {
    this._call = call;
  }

  get _newSize(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeSizeCall__Outputs {
  _call: ChangeSizeCall;

  constructor(call: ChangeSizeCall) {
    this._call = call;
  }
}

export class ClosePositionCall extends ethereum.Call {
  get inputs(): ClosePositionCall__Inputs {
    return new ClosePositionCall__Inputs(this);
  }

  get outputs(): ClosePositionCall__Outputs {
    return new ClosePositionCall__Outputs(this);
  }
}

export class ClosePositionCall__Inputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }

  get _add(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClosePositionCall__Outputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }
}

export class ContractOwnerApprovalCall extends ethereum.Call {
  get inputs(): ContractOwnerApprovalCall__Inputs {
    return new ContractOwnerApprovalCall__Inputs(this);
  }

  get outputs(): ContractOwnerApprovalCall__Outputs {
    return new ContractOwnerApprovalCall__Outputs(this);
  }
}

export class ContractOwnerApprovalCall__Inputs {
  _call: ContractOwnerApprovalCall;

  constructor(call: ContractOwnerApprovalCall) {
    this._call = call;
  }

  get _add(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _val(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ContractOwnerApprovalCall__Outputs {
  _call: ContractOwnerApprovalCall;

  constructor(call: ContractOwnerApprovalCall) {
    this._call = call;
  }
}

export class GetBalanceCall extends ethereum.Call {
  get inputs(): GetBalanceCall__Inputs {
    return new GetBalanceCall__Inputs(this);
  }

  get outputs(): GetBalanceCall__Outputs {
    return new GetBalanceCall__Outputs(this);
  }
}

export class GetBalanceCall__Inputs {
  _call: GetBalanceCall;

  constructor(call: GetBalanceCall) {
    this._call = call;
  }

  get _add(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class GetBalanceCall__Outputs {
  _call: GetBalanceCall;

  constructor(call: GetBalanceCall) {
    this._call = call;
  }
}

export class OpenPositionCall extends ethereum.Call {
  get inputs(): OpenPositionCall__Inputs {
    return new OpenPositionCall__Inputs(this);
  }

  get outputs(): OpenPositionCall__Outputs {
    return new OpenPositionCall__Outputs(this);
  }
}

export class OpenPositionCall__Inputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }

  get _side(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _collateral(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _size(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maxLoss(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class OpenPositionCall__Outputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }
}
